require 'open-uri'
require 'credentials_manager'

default_platform(:ios)

platform :ios do

  lane :waves_test do
    ENV['SCHEME_PROJECT'] ="WavesWallet-iOS-Test"    
    ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.waveswallet.test"
    ENV['TESTFLIGHT_APP_IDENTITIFER'] = "com.wavesplatform.waveswallet.test"
    ENV['URL_FIREBASE_PROD'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Prod.plist"
    ENV['URL_FIREBASE_TEST'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Test.plist"
    ENV['URL_FIREBASE_DEV'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Dev.plist"
    build_and_upload
  end

  lane :waves do
    ENV['SCHEME_PROJECT'] ="WavesWallet-iOS-Release"    
    ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.WavesWallet"
    ENV['TESTFLIGHT_APP_IDENTITIFER'] = "com.wavesplatform.WavesWallet"
    build_and_upload
  end

  lane :build_and_upload do

    setup_circle_ci

    unless Helper.ci?
        sh("echo CI DONT USE")
        ENV['MATCH_KEYCHAIN_NAME']="login.keychain"
    end
    sh("printenv")

    match(app_identifier: ["com.wavesplatform.waveswallet.test", "com.wavesplatform.waveswallet", "com.wavesplatform.waveswallet.dev"],
      git_url: "#{ENV['URL_CERTIFICATES_GIT']}",
      username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
      type: "appstore",
      readonly: true,
      keychain_name: "#{ENV['MATCH_KEYCHAIN_NAME']}")

    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Dev.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Test.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Prod.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE_PROD']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Dev.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE_TEST']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Test.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE_DEV']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Prod.plist")

		cocoapods(
			verbose: true,
			clean: true,
			use_bundle_exec: false
		)

		gym(scheme: "#{ENV['SCHEME_PROJECT']}",
        workspace: "WavesWallet-iOS.xcworkspace",
        include_bitcode: true,
        include_symbols: true,
        export_options: "#{Dir.pwd}/ExportOptions-AppStore.plist"
    )

    testflight(username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
              itc_provider: "#{ENV['FASTLANE_ITC_TEAM_ID']}",                                       
              skip_waiting_for_build_processing: "true")
  end

  lane :certificates do
    match(app_identifier: ["com.wavesplatform.waveswallet.test", "com.wavesplatform.waveswallet", "com.wavesplatform.waveswallet.dev"],
          git_url: "#{ENV['URL_CERTIFICATES_GIT']}",
          username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
          type: "appstore",
          readonly: true)
  end

  lane :download_environments do
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Dev.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Test.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info-Prod.plist")

    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
  end

  lane :upload_testflight do
    testflight(username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
               itc_provider: "#{ENV['FASTLANE_ITC_TEAM_ID']}",      
               wait_for_uploaded_build: "false")
  end

end
